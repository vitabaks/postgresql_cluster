---
- name: add_pgnode.yml | PostgreSQL HA Cluster Scaling (add a replica node)
  hosts: postgres_cluster
  become: true
  become_method: sudo
  any_errors_fatal: true
  gather_facts: true
  handlers:
    - ansible.builtin.import_tasks: roles/patroni/handlers/main.yml

  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "vars/system.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
      tags: always

    - name: "[Pre-Check] Checking Linux distribution"
      ansible.builtin.fail:
        msg: "{{ ansible_distribution }} is not supported"
      when: ansible_distribution not in os_valid_distributions

    - name: "[Pre-Check] Checking version of OS Linux"
      ansible.builtin.fail:
        msg: "{{ ansible_distribution_version }} of {{ ansible_distribution }} is not supported"
      when: ansible_distribution_version is version_compare(os_minimum_versions[ansible_distribution], '<')

    - name: "[Pre-Check] Check if there is a node with new_node set to true"
      ansible.builtin.set_fact:
        new_nodes: "{{ new_nodes | default([]) + [item] }}"
      when: hostvars[item]['new_node'] | default(false) | bool
      loop: "{{ groups['replica'] }}"
      tags: always

    # Stop, if no nodes found with new_node variable
    - name: "Pre-Check error. No nodes found with new_node set to true"
      run_once: true # noqa run-once
      ansible.builtin.fail:
        msg: "Please specify the new_node=true variable for the new server to add it to the existing cluster."
      when: new_nodes | default([]) | length < 1

    - name: Print a list of new nodes
      run_once: true # noqa run-once
      ansible.builtin.debug:
        var: new_nodes
      tags: always

    - name: Add a new node to pg_hba.conf on existing cluster nodes
      ansible.builtin.include_role:
        name: patroni/config
        tasks_from: pg_hba
      when: not new_node | default(false) | bool

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when:
        - new_node | default(false) | bool
        - ansible_os_family == "Debian"
        - installation_method == "repo"

    - name: Make sure the gnupg and apt-transport-https packages are present
      ansible.builtin.apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when:
        - new_node | default(false) | bool
        - ansible_os_family == "Debian"
        - installation_method == "repo"

    - name: Build a firewall_ports_dynamic_var
      ansible.builtin.set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when:
        - new_node | default(false) | bool
        - firewall_enabled_at_boot | bool
      tags: firewall

    - name: Build a firewall_rules_dynamic_var
      ansible.builtin.set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when:
        - new_node | default(false) | bool
        - firewall_enabled_at_boot | bool
      tags: firewall

  roles:
    - role: ansible-role-firewall
      environment: "{{ proxy_env | default({}) }}"
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | default([]) | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | default([]) | unique }}"
      when:
        - new_node | default(false) | bool
        - firewall_enabled_at_boot | bool
      tags: firewall

    - role: pre-checks
      vars:
        minimal_ansible_version: 2.16.0
        timescale_minimal_pg_version: 12 # if enable_timescale is defined
      tags: always

    - role: sysctl
      when:
        - new_node | default(false) | bool

    - role: ssh-keys
      when:
        - enable_ssh_key_based_authentication | default(false) | bool

  tasks:
    - name: Add host to group new_replica (in-memory inventory)
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: new_replica
      loop: "{{ new_nodes }}"
      changed_when: false
      tags: always

- name: add_pgnode.yml | Configure new PostgreSQL node
  hosts: new_replica
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true

  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "vars/system.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
      tags: always

    # if 'dcs_type' is 'consul'
    - name: Add a nameserver entry poining to localhost for dnsmasq
      ansible.builtin.set_fact:
        nameservers: "{{ ['127.0.0.1'] + (nameservers | default([])) }}"
      when: dcs_type == "consul" and consul_dnsmasq_enable | bool and ('127.0.0.1' not in (nameservers | default([])))

  roles:
    - role: hostname
    - role: resolv_conf
    - role: etc_hosts
    - role: add-repository
    - role: packages
    - role: sudo
    - role: swap
    - role: transparent_huge_pages
    - role: pam_limits
    - role: io-scheduler
    - role: locales
    - role: timezone
    - role: ntp
    - role: copy
    - role: cron

- name: add_pgnode.yml | Configure pgBackRest
  hosts: pgbackrest:postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
      tags: always

  roles:
    - role: pgbackrest
      when: pgbackrest_install|bool

- name: add_pgnode.yml | Import Consul playbook
  ansible.builtin.import_playbook: consul.yml
  when: dcs_type == "consul"
  tags: consul

- name: add_pgnode.yml | Add new PostgreSQL replica to the cluster
  hosts: new_replica
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  vars:
    existing_pgcluster: true

  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "vars/system.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
      tags: always

  roles:
    - role: wal-g
      when: wal_g_install|bool

    - role: pg_probackup
      when: pg_probackup_install|bool

    - role: tls_certificate/copy
      vars:
        copy_for: "pg"
      when: tls_cert_generate|bool

    - role: pgbouncer
      when: pgbouncer_install|bool

    - role: pgpass

    - role: patroni

    - role: vip-manager
      when: not with_haproxy_load_balancing|bool and
        (cluster_vip is defined and cluster_vip | length > 0)

    - role: netdata
      when: netdata_install is defined and netdata_install|bool

    # finish (info)
    - role: deploy-finish
